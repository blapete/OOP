GUIs introduce a new model of computing known as the event-driven model.



Event-driven programs don't rely on input() and print().

The user interactes with elements in a window at will using a keyboard and/or mouse or other pointing device.

They may be able to click various buttons or icons, make selections from menus, provide input to text fields, clicking an avatar, etc.



Central to event-driven programming is the concept of an event.

A mouse click or a key press are examples (each are actually made up of two events: mouse down and mouse up or key down and key up).

Event:

Something that happens while a program is running that the program wants to or needs to respond to. Most events are generated by user actions.



An event-driven GUI program runs constantly in an infinite loop.

Each time through the loop, the program checks for any new events it needs to react to and executs appropriate code to handle them.

Also each time through the loop, the program needs to redraw all the elemtns in the window to update what the user sees.



Example:

A simple GUI program with two buttons: Bark and Meow.

The user can click the buttons at any time, the program runs in a loop and constantly checks to see if either button has been clicked.

When the program receives a mouse down event, it remembers which button has been clicked and draws a depressed image of that button.

When the program receives a mouse up event, it remembers the new state and redraws that button with its original appearance, and then plays the appropriate sound.

Because the main loop runs so quickly, the user perceives that the sound plays immediately after the click the button.

Each time through the loop the program redraws both buttons with an image matching each button's current state.