Classes for text display field and input text field



Text Output

The pygwidgets package contains a DisplayText class for showing text that is more full-featured than the previous SimpleText class.

When creating an instance of a DisplayText, the only requirements are to pass in the window and the location.

The first keyword parameter is value, which may be specified with a string as starting text to be shown in the field.

Since value is the first keyword parameter, it can be given as either a positional or a keyword argument:

oTextField = pygwidgets.DisplayText(window, (10, 400), 'Hello World')

Will work the same way as this:

oTextField = pygwidgets.DisplayText(window, (10, 400), value='Hello World')

Also can customize the look of the output text by specifying any or all of the optional keyword parameters:

oTextField = pygwidgets.DisplayText(window, (10, 400), value='Some title text', fontName='Courier', fontSize=40, width=150, justified='center', textColor=(255, 255, 0))

The DisplayText class has a number of additional methods, the most important of which is setValue(), which is called to change the text drawn in the field:

oTextField.setValue('Any new text')

At the bottom of the main loop, call the object's draw() method:

oTextField.draw()



Text input

In a typical text-based Python program, input() is called to get input from the user, which stops the program until the user enters text in the shell window.

In event-driven GUI programs, the main loop never stops and a different approach must be used.

For input from a user, a GUI typically presents a field that the user can type in.

An input field must deal with all keyboard keys, some of which show while others are used for editing or cursor movement within the field.

It must allow for the user holding down a key to repeat it.

The pygwidgets InputText class provides all this functionality.

When creating an instance of a InputText, the only requirements are to pass in the window and the location.

oInputField = pygwidgets.InputText(window, (10,100))

The text attributes of an InputText object can be customized by specifying optional keyword arguments:

oInputField = pygwidgets.InputText(window, (10, 400), value='Starting Text', fontName='Helvetica', fontSize=40, width=150, textColor=(255, 255, 0))

After instantiating an InputText field, the typical code in the main loop would look like this:

while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()
        
        if oInputField.handleEvent(event):
            # User has pressed Enter or Return
            userText = oInputField.getValue() # get the text the user entered
            <Any code to run using the user's input>

oInputField.draw() # at the bottom of the while loop, tell it to draw

If a window contains multiple input fields, key presses are handled by the field with current keyboard focus, which is changed when a user clicks in a different field.

To allow a field to have intiial keyboard focus, set the initialFocus keyword parameter to True in the InputText text object of choice.

If there are multiple InputText fields in a window, a typical user interface design approach is to include an OK or submit button.

When the button is clicked, the code could then call the getValue() method on each field.