When nstantiating a button, checkbox, or radio button widget in pygwidgets, there are two options:

1.
Instantiate a text version that draws its own art and adds a text label based on a string passed in.

2.
Instantiate a custom version where the programmer supplies the art.



Button classes available:

                Text version        Custom version

Button          TextButton          CustomButton

Checkbox        TextCheckBox        CustomCheckBox

Radio button    TextRadioButton     CustomRadioButton

The difference between text and custom versions of these classes are only relevant during instantiation.

Once an object is created from a text or custom button class, all the remaining methods of the pair of classes are identical.



TextButtons

The actual definition of the __init__() method of the TextButton class in pygwidgets:

def __init__(self, window, loc, text, 
            width=None, 
            height=40, 
            textColor=PYGWIDGETS_BLACK, 
            upColor=PYGWIDGETS_NORMAL_GRAY,
            overColor=PYGWIDGETS_OVER_GRAY,
            downColor=PYGWIDGETS_DOWN_GRAY,
            fontName=DEFAULT_FONT_NAME,
            fontSize=DEFAULT_FONT_SIZE,
            soundOnClick=None,
            enterToActivate=False,
            callback=None,
            nickname=None):

To view the documentation of a class, call the built-in help() function in the Python shell:

>>> help(pygwidgets.TextButton)



When creating an instance of a TextButton, the only requirements are to pass in the window, the location of the window, and the text to be show on the button.

The code to create a TextButton using all the defaults looks like this:

oButton = pygwidgets.TextButton(window, (50,50), 'Text Button')

The code in the __init__() method of the TextButton class uses the pygame drawing methods to construct its own art for all four states (up, down, over, and disabled)

The preceding line of code creates an "up" version of a button.

Any of the default parameters can be overwritten with different keyword values:

oButton = pygwidgets.TextButton(window, (50,50), 'Text Button',
                                width=200,
                                height=30,
                                textColor=(255,255,128),
                                upColor=(128,0,0),
                                fontName='Courier',
                                fontSize=14,
                                soundOnClick='sounds/blip.wav',
                                enterToActivate=True)



CustomtButtons

The CustomButton class allows the programmer to create custom art for a button.

When creating an instance of a CustomButton, the only requirements are to pass in the window, the location of the window, and a path to the image of the up state of the button.

restartButton = pygwidgets.CustomButton(window, (100, 430), 'images/RestartButtonUp.png')

The down, own, and disabled states are optional keyword arguments, and for any of these where no value is passed in, CustomButton will use a copy of the up image.

It's more typical and strongly suggested to pass in paths for the optional images like so:

restartButton = pygwidgets.CustomButton(window, (100, 430),
                                        'images/RestartButtonUp.png',
                                        down='images/RestartButtonDown.png',
                                        over='images/RestartButtonOver.png',
                                        disabled='images/RestartButtonDisabled.png',
                                        soundOnClick='sounds/blip.wav',
                                        nickname='restart')


Using Buttons

After instantiation, here is some typical code to use a button object, oButton, independent of it being a TextButton or a CustomButton:

while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()
        
        if oButton.handleEvent(event):
            # User has clicked this button
            <Any code to run here when button is clicked>

oButton.draw() # at the bottom of the while loop, tell it to draw