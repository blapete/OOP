class LightSwitch():
    def __init__(self):
        self.switchIsOn = False

    def turnOn(self):
         self.switchIsOn = True

    def turnOff(self):
         self.switchIsOn = False



Class:
Code that defines what an object will remember (its data or state) and the things that it will be able to do (its functions or behavior).

Instantiation:
The process of creating an object from a class.

Method:
A function defined inside a class. A method always has at least one parameter, which is usually named self.

Instance variable:
In a method, any variable whose name begins, by convention, with the prefix self (ex. self.x). Instance variables have object scope.

Object:
Data, plus the code that acts on that data, over time.



CLASS, OBJECTS, AND INSTANTIATION

- The first method in every class has the special name __init__.

- Whenever an object is created from a class, this method runs automatically, any initialization code goes in __init__.

- The __init__() method is not strictly required, but considered good practice to include it.

- Python takes care of constructing the object (allocating memory) for you.

- The special __init__() method is called the "initializer" method, where you give variables initial values.

- Most other OOP languages require a method named new(), which is often referred to as a constructor.



SCOPE AND INSTANCE VARIABLES

Scopes:

Procedural & OOP
1. Global variable
2. Local variable (variables in a function)

OOP
3. Object/ class/ instance variable (variables in the class definition)

- Methods can have both local variables and instance variables.

- In a method, any variable whose name does not start with self. is a local variable and will go away when that method exits, meanining other methods within the class can no longer use that variable.

- Instance variables have object scope (they are available to all methods defined in a class).

- Instance variables and object scope are the keys to how objects remember data.

- The __init__() method is the logical place to initialize instance variables.

- Each object created from a class gets its owns et of instance variables, independent of any other objects instantiated from that class.



METHODS vs FUNCTION

-  All methods of a class must be indented under the class statement.

-  All methods have a special first paramter that (by conventions) is named self.

-  Methods in a class can use instance variables, written in the form of self.<variableName>.



CREATING AN OBJECT FROM A CLASS

oLightSwitch = LightSwitch()

1. the code asks Python to create an object from the LightSwitch class.

2. Python allocates space in memory for a LightSwitch object, then calls the __init__() mtheod of the LightSwitch class, passing in the newly created object.

3. The __init__() method of the LightSwitch class runs. The new object is assigned to the parameter self. The code of __init__() initializes any instance variables in the object (in this case, the instance variable is self.switchIsOn).

4. Python returns the new object to the original caller.

5. The result of the original call is assigned into the variable oLightSwitch, so it now represents the object.