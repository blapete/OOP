All built-in data types in Python are implemented as classes:

>>> myString = 'abcde'
>>> print(type(myString))
<class 'str'>

Assign string is assigned to a variable, when the type() function is called/printed it shows an instance of the str string class.

The str class gives us a number of methods to call with strings, including myString.upper(), myString.lower(), myString.strip(), etc.

>>> myList = [10, 20, 30, 40]
>>> print(type(myList))
<class 'list'>

All lists are instances of the list class, which has many methods including myList.append(), myList.count(), myList.index(), and so on.



- When you write a class you are defining a new data type.
- Your code provides the details by defining what data it maintains and what operations it can perform.

>>> oLightSwitch = LightSwitch()
>>> print(type(oLightSwitch))
<class 'LightSwitch'>



- A class defined what an object will look like when you instantiate one.
- An object is a set of instance variables and the code of the methods in the class from which the object was instantiatied.
- Any number of objects can be instantiated from a class, and each has its own set of instance variables.
- When you call a method of an object, the method runs and uses the set of instance variables in that object.