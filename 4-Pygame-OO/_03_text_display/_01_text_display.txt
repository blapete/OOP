Displaying text in a window is fairly complicated compared to the shell.

Requires the programmer to choose a location, fonts and sizes, and other attributes.



pygame.font.init()
myFont = pygame.font.SysFont('Comic Sans MS, 30)
textSurface = myfont.render('Some text', True, (0, 0,, 0))
window.blit(textSurface, (10,10))

1. Initialize the font system within pygame

2. Tell pygame to load a particular font from the system by name

3. Use that font to render the text, which creates a graphical image of the text, called a surface in pygame

4. Supply the text to output, a Boolean whether the text should be anti-aliased, and a color in RGB

5. Use blit() to draw the image of the text in the window at some (x, y) location



If the text doesn't change, there will be a lot of wasted work done re-creating the textSurface on each iteration through the main loop.

Even with just displaying text, the complexity can be hidden using a class.



Build a set of methods that take care of font loading and text rendering.